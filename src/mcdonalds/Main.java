/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mcdonalds;

import ADReNA_API.Data.DataSet;
import ADReNA_API.NeuralNetwork.Backpropagation;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;

/**
 *
 * @author felipe
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        
        JComboBox combo_alface = cb_alface;
        combo_alface.addItem("Sim");
        combo_alface.addItem("Não");
        
        JComboBox combo_bacon = cb_bacon;
        combo_bacon.addItem("Sim");
        combo_bacon.addItem("Não");
        
        JComboBox combo_maionese = cb_maionese;
        combo_maionese.addItem("Sim");
        combo_maionese.addItem("Não");
        
        JComboBox combo_ketchup = cb_ketchup;
        combo_ketchup.addItem("Sim");
        combo_ketchup.addItem("Não");
        
        JComboBox combo_picles = cb_picles;
        combo_picles.addItem("Sim");
        combo_picles.addItem("Não");
        
        JComboBox combo_tomate = cb_tomate;
        combo_tomate.addItem("Sim");
        combo_tomate.addItem("Não");
        
        JComboBox combo_mostarda = cb_mostarda;
        combo_mostarda.addItem("Sim");
        combo_mostarda.addItem("Não");
        
        JComboBox combo_cebola = cb_cebola;
        combo_cebola.addItem("Sim");
        combo_cebola.addItem("Não");
        combo_cebola.addItem("Caramelizada");
        combo_cebola.addItem("Cebola Crispy");
        
        JComboBox combo_carne = cb_tipo_carne;
        combo_carne.addItem("Carne Bouvina");
        combo_carne.addItem("Carne de Frango");
        combo_carne.addItem("Carne de Peixe");
        
        JComboBox combo_tipo_pao = cb_tipo_pao;
        combo_tipo_pao.addItem("Pão Tostado");
        combo_tipo_pao.addItem("Pão com Gergilin");
        combo_tipo_pao.addItem("Pão Brioche");
        
        JComboBox combo_tipo_queijo = cb_tipo_queijo;
        combo_tipo_queijo.addItem("Não");
        combo_tipo_queijo.addItem("Muçarela");
        combo_tipo_queijo.addItem("Parmesão");
        combo_tipo_queijo.addItem("Cheddar Melt");
        
        JComboBox combo_pao = cb_quantidade_pao;
        combo_pao.addItem("1");
        combo_pao.addItem("2");
        combo_pao.addItem("3");
        combo_pao.addItem("4");
        
        JComboBox combo_queijo = cb_quantidade_queijo;
        combo_queijo.addItem("1");
        combo_queijo.addItem("2");
        combo_queijo.addItem("3");
        combo_queijo.addItem("Não");
        
        JComboBox combo_hamburguers = cb_quantidade_hamburguers;
        combo_hamburguers.addItem("1");
        combo_hamburguers.addItem("2");
        combo_hamburguers.addItem("3");
        combo_hamburguers.addItem("4");
        
        JComboBox combo_ovo = cb_ovo;
        combo_ovo.addItem("Sim");
        combo_ovo.addItem("Não");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lb_learning_rate = new javax.swing.JLabel();
        cb_learning_rate = new javax.swing.JTextField();
        lb_error_rate = new javax.swing.JLabel();
        cb_error_rate = new javax.swing.JTextField();
        lb_max_iteration = new javax.swing.JLabel();
        cb_max_iteration = new javax.swing.JTextField();
        lb_numero_camadas = new javax.swing.JLabel();
        cb_numero_camadas = new javax.swing.JTextField();
        lb_tamanho_camadas = new javax.swing.JLabel();
        cb_tamanho_camadas = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        lb_quantidade_pao = new javax.swing.JLabel();
        cb_quantidade_pao = new javax.swing.JComboBox<>();
        lb_quantidade_queijo = new javax.swing.JLabel();
        cb_quantidade_queijo = new javax.swing.JComboBox<>();
        lb_quantidade_hamburguers = new javax.swing.JLabel();
        cb_quantidade_hamburguers = new javax.swing.JComboBox<>();
        lb_tipo_queijo = new javax.swing.JLabel();
        cb_tipo_queijo = new javax.swing.JComboBox<>();
        lb_tomate = new javax.swing.JLabel();
        cb_tomate = new javax.swing.JComboBox<>();
        lb_bacon = new javax.swing.JLabel();
        cb_bacon = new javax.swing.JComboBox<>();
        lb_tipo_carne = new javax.swing.JLabel();
        cb_tipo_carne = new javax.swing.JComboBox<>();
        lb_picles = new javax.swing.JLabel();
        cb_picles = new javax.swing.JComboBox<>();
        lb_alface = new javax.swing.JLabel();
        cb_alface = new javax.swing.JComboBox<>();
        lb_ketchup = new javax.swing.JLabel();
        cb_ketchup = new javax.swing.JComboBox<>();
        lb_tipo_pao = new javax.swing.JLabel();
        cb_tipo_pao = new javax.swing.JComboBox<>();
        lb_cebola = new javax.swing.JLabel();
        cb_cebola = new javax.swing.JComboBox<>();
        lb_mostarda = new javax.swing.JLabel();
        cb_mostarda = new javax.swing.JComboBox<>();
        lb_maionese = new javax.swing.JLabel();
        cb_maionese = new javax.swing.JComboBox<>();
        bt_reconhecer = new javax.swing.JButton();
        lb_ovo = new javax.swing.JLabel();
        cb_ovo = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        error_rate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        iteration_number = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reconhecedor de McDonalds");
        setPreferredSize(new java.awt.Dimension(800, 650));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mcdonalds/img/mc.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jLabel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Definições do Algoritmo"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        lb_learning_rate.setText("LearningRate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel3.add(lb_learning_rate, gridBagConstraints);

        cb_learning_rate.setText("0.5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel3.add(cb_learning_rate, gridBagConstraints);

        lb_error_rate.setText("ErrorRate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel3.add(lb_error_rate, gridBagConstraints);

        cb_error_rate.setText("0.005");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel3.add(cb_error_rate, gridBagConstraints);

        lb_max_iteration.setText("Max Iteration");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel3.add(lb_max_iteration, gridBagConstraints);

        cb_max_iteration.setText("15000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(cb_max_iteration, gridBagConstraints);

        lb_numero_camadas.setText("Nº de Camadas Interm.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanel3.add(lb_numero_camadas, gridBagConstraints);

        cb_numero_camadas.setText("2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanel3.add(cb_numero_camadas, gridBagConstraints);

        lb_tamanho_camadas.setText("Tamanho Camada Interm.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanel3.add(lb_tamanho_camadas, gridBagConstraints);

        cb_tamanho_camadas.setText("12");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanel3.add(cb_tamanho_camadas, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Caracteristicas do Hamburguer"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        lb_quantidade_pao.setText("Quantidade de Pãos");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_quantidade_pao, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(cb_quantidade_pao, gridBagConstraints);

        lb_quantidade_queijo.setText("Quantidade de Queijos");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_quantidade_queijo, gridBagConstraints);

        cb_quantidade_queijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_quantidade_queijoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(cb_quantidade_queijo, gridBagConstraints);

        lb_quantidade_hamburguers.setText("Quantidade de Hamburguers");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_quantidade_hamburguers, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(cb_quantidade_hamburguers, gridBagConstraints);

        lb_tipo_queijo.setText("Tipo do Queijo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_tipo_queijo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(cb_tipo_queijo, gridBagConstraints);

        lb_tomate.setText("Tomate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_tomate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(cb_tomate, gridBagConstraints);

        lb_bacon.setText("Bacon");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_bacon, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(cb_bacon, gridBagConstraints);

        lb_tipo_carne.setText("Tipo da Carne");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_tipo_carne, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(cb_tipo_carne, gridBagConstraints);

        lb_picles.setText("Picles");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_picles, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(cb_picles, gridBagConstraints);

        lb_alface.setText("Alface");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_alface, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(cb_alface, gridBagConstraints);

        lb_ketchup.setText("Ketchup");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_ketchup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(cb_ketchup, gridBagConstraints);

        lb_tipo_pao.setText("Tipo do Pão");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_tipo_pao, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(cb_tipo_pao, gridBagConstraints);

        lb_cebola.setText("Cebola");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_cebola, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(cb_cebola, gridBagConstraints);

        lb_mostarda.setText("Mostarda");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_mostarda, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(cb_mostarda, gridBagConstraints);

        lb_maionese.setText("Maionese");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_maionese, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(cb_maionese, gridBagConstraints);

        bt_reconhecer.setText("Reconhecer");
        bt_reconhecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_reconhecerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel1.add(bt_reconhecer, gridBagConstraints);

        lb_ovo.setText("Ovo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(lb_ovo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(cb_ovo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Erro atingido");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        error_rate.setToolTipText("");
        error_rate.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel2.add(error_rate, gridBagConstraints);

        jLabel3.setText("Número de iterações");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        iteration_number.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel2.add(iteration_number, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jPanel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_reconhecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_reconhecerActionPerformed
        error_rate.setText("");
        iteration_number.setText("");
        
        double[] query = new double[22]; 
        query[0] = cb_alface.getSelectedItem().toString() == "Sim" ? 1 : 0;        
        query[1] = cb_bacon.getSelectedItem().toString() == "Sim" ? 1 : 0;
        query[2] = cb_maionese.getSelectedItem().toString() == "Sim" ? 1 : 0;
        query[3] = cb_ketchup.getSelectedItem().toString() == "Sim" ? 1 : 0;
        query[4] = cb_picles.getSelectedItem().toString() == "Sim" ? 1 : 0;
        query[5] = cb_tomate.getSelectedItem().toString() == "Sim" ? 1 : 0;
        query[6] = cb_mostarda.getSelectedItem().toString() == "Sim" ? 1 : 0;
        
        switch(cb_tipo_carne.getSelectedItem().toString())
        {
            case "Carne Bouvina":
                query[7] = 0;
                query[8] = 0;
                break;
                
            case "Carne de Frango":
                query[7] = 0;
                query[8] = 1;
                break;
                
            case "Carne de Peixe":
                query[7] = 1;
                query[8] = 0;
                break;  
        }
        
        switch(cb_quantidade_pao.getSelectedItem().toString())
        {
            case "1":
                query[9] = 0;
                query[10] = 0;
                break;
                
            case "2":
                query[9] = 0;
                query[10] = 1;
                break;
                
            case "3":
                query[9] = 1;
                query[10] = 0;
                break;
           
            case "Não":
                query[9] = 1;
                query[10] = 1;
                break;    
        }
        
        switch(cb_tipo_pao.getSelectedItem().toString())
        {
            case "Pão Tostado":
                query[11] = 0;
                query[12] = 0;
                break;
                
            case "Pão com Gergilin":
                query[11] = 0;
                query[12] = 1;
                break;
                
            case "Pão Brioche":
                query[11] = 1;
                query[12] = 0;
                break;
        }
        
        switch(cb_cebola.getSelectedItem().toString())
        {
            case "Sim":
                query[13] = 0;
                query[14] = 0;
                break;
                
            case "Não":
                query[13] = 0;
                query[14] = 1;
                break;
                
            case "Caramelizada":
                query[13] = 1;
                query[14] = 0;
                break;
           
            case "Cebola Crispy":
                query[13] = 1;
                query[14] = 1;
                break;    
        }
        
        switch(cb_tipo_queijo.getSelectedItem().toString())
        {
            case "Não":
                query[15] = 0;
                query[16] = 0;
                break;
                
            case "Muçarela":
                query[15] = 0;
                query[16] = 1;
                break;
                
            case "Parmesão":
                query[15] = 1;
                query[16] = 0;
                break;
           
            case "Cheddar Melt":
                query[15] = 1;
                query[16] = 1;
                break;    
        }
        
        switch(cb_quantidade_hamburguers.getSelectedItem().toString())
        {
            case "1":
                query[17] = 0;
                query[18] = 0;
                break;
                
            case "2":
                query[17] = 0;
                query[18] = 1;
                break;
                
            case "3":
                query[17] = 1;
                query[18] = 0;
                break;
           
            case "4":
                query[17] = 1;
                query[18] = 1;
                break;    
        }
        
        switch(cb_quantidade_queijo.getSelectedItem().toString())
        {
            case "1":
                query[19] = 0;
                query[20] = 0;
                break;
                
            case "2":
                query[19] = 0;
                query[20] = 1;
                break;
                
            case "3":
                query[19] = 1;
                query[20] = 0;
                break;
           
            case "4":
                query[19] = 1;
                query[20] = 1;
                break;    
        }
        
        query[21] = cb_ovo.getSelectedItem().toString() == "Sim" ? 1 : 0;
        
        /*StringBuilder sb = new StringBuilder();
        for (int i = 0; i < query.length; i++) {
            sb.append((int) query[i]);
            if (i != query.length - 1) {
                sb.append(", ");
            }
        }
        String joined = sb.toString();
        
        System.out.println(joined); */   
        int camadas[] = new int[Integer.valueOf(this.cb_numero_camadas.getText())];

        for (int i = 0; i < Integer.valueOf(this.cb_numero_camadas.getText()); i++) {
                camadas[i] = Integer.valueOf(this.cb_tamanho_camadas.getText());
        }
                        
        Backpropagation RNA = new Backpropagation(22, 5, camadas);
        RNA.SetLearningRate(new Double(cb_learning_rate.getText()));
        RNA.SetErrorRate(new Double(cb_error_rate.getText()));
        RNA.SetMaxIterationNumber(Integer.valueOf(cb_max_iteration.getText()));
        
        DataSet traningSet = new DataSet(22, 5);
        try {
            //triplo-quarterao
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0}, new double[] {0, 0, 0, 0, 0}));
            //egg-quarterao
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1}, new double[] {0, 0, 0, 0, 1}));
            //triplo-tasty
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0}, new double[] {0, 0, 0, 1, 0}));
            //big-tasty
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0}, new double[] {0, 0, 0, 1, 1}));
            //mcnifico-bacon
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0}, new double[] {0, 0, 1, 0, 0}));
            //duplo-quarterao
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0}, new double[] {0, 0, 1, 0, 1}));
            //big-mac
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0}, new double[] {0, 0, 1, 1, 0}));
            //quarterao-com-queijo
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0}, new double[] {0, 0, 1, 1, 1}));
            //cheddar-mcmelt
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0}, new double[] {0, 1, 0, 0, 0}));
            //triplo-burger-bacon
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0}, new double[] {0, 1, 0, 0, 1}));
            //triplo-cheeseburger
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0}, new double[] {0, 1, 0, 1, 0}));
            //mcduplo
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0}, new double[] {0, 1, 0, 1, 1}));
            //duplo-salada
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0}, new double[] {0, 1, 1, 0, 0}));
            //cheeseburger
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0}, new double[] {0, 1, 1, 0, 1}));
            //hamburger
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, new double[] {0, 1, 1, 1, 0}));
            //clubhouse
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0}, new double[] {0, 1, 1, 1, 1}));
            //quatrro-formaggi
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0}, new double[] {1, 0, 0, 0, 0}));
            //crispy-onion-barbecue
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0}, new double[] {1, 0, 0, 0, 1}));
            //big-tasty-chicken-bacon
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0}, new double[] {1, 0, 0, 1, 0}));
            //chicken-supreme
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0}, new double[] {1, 0, 0, 1, 1}));
            //mcchicken
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0}, new double[] {1, 0, 1, 0, 0}));
            //mcfish
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0}, new double[] {1, 0, 1, 0, 1}));
            //extra-chicken
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0}, new double[] {1, 0, 1, 1, 0}));
            //grand-cheddar-mcmelt-bacon
            traningSet.Add(new ADReNA_API.Data.DataSetObject(new double[] {0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0}, new double[] {1, 0, 1, 1, 1}));

        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            RNA.Learn(traningSet);
            double[] retorno = RNA.Recognize(query);
            error_rate.setText(Double.toString(RNA.GetErrorRate()));
            iteration_number.setText(Double.toString(RNA.GetIterationNumber()));
            

            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < retorno.length; i++) {
                int resposta = 0;
                if(retorno[i] > 0.6)
                {
                    resposta = 1;
                }
                sb.append(resposta);
                if (i != retorno.length - 1) {
                    sb.append("");
                }
            }
            String joined = sb.toString();

            System.out.println(joined);
            Image image = new Image(joined);
            image.setVisible(true);
            // mostrar imagem            
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_bt_reconhecerActionPerformed

    private void cb_quantidade_queijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_quantidade_queijoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_quantidade_queijoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_reconhecer;
    private javax.swing.JComboBox<String> cb_alface;
    private javax.swing.JComboBox<String> cb_bacon;
    private javax.swing.JComboBox<String> cb_cebola;
    private javax.swing.JTextField cb_error_rate;
    private javax.swing.JComboBox<String> cb_ketchup;
    private javax.swing.JTextField cb_learning_rate;
    private javax.swing.JComboBox<String> cb_maionese;
    private javax.swing.JTextField cb_max_iteration;
    private javax.swing.JComboBox<String> cb_mostarda;
    private javax.swing.JTextField cb_numero_camadas;
    private javax.swing.JComboBox<String> cb_ovo;
    private javax.swing.JComboBox<String> cb_picles;
    private javax.swing.JComboBox<String> cb_quantidade_hamburguers;
    private javax.swing.JComboBox<String> cb_quantidade_pao;
    private javax.swing.JComboBox<String> cb_quantidade_queijo;
    private javax.swing.JTextField cb_tamanho_camadas;
    private javax.swing.JComboBox<String> cb_tipo_carne;
    private javax.swing.JComboBox<String> cb_tipo_pao;
    private javax.swing.JComboBox<String> cb_tipo_queijo;
    private javax.swing.JComboBox<String> cb_tomate;
    private javax.swing.JTextField error_rate;
    private javax.swing.JTextField iteration_number;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lb_alface;
    private javax.swing.JLabel lb_bacon;
    private javax.swing.JLabel lb_cebola;
    private javax.swing.JLabel lb_error_rate;
    private javax.swing.JLabel lb_ketchup;
    private javax.swing.JLabel lb_learning_rate;
    private javax.swing.JLabel lb_maionese;
    private javax.swing.JLabel lb_max_iteration;
    private javax.swing.JLabel lb_mostarda;
    private javax.swing.JLabel lb_numero_camadas;
    private javax.swing.JLabel lb_ovo;
    private javax.swing.JLabel lb_picles;
    private javax.swing.JLabel lb_quantidade_hamburguers;
    private javax.swing.JLabel lb_quantidade_pao;
    private javax.swing.JLabel lb_quantidade_queijo;
    private javax.swing.JLabel lb_tamanho_camadas;
    private javax.swing.JLabel lb_tipo_carne;
    private javax.swing.JLabel lb_tipo_pao;
    private javax.swing.JLabel lb_tipo_queijo;
    private javax.swing.JLabel lb_tomate;
    // End of variables declaration//GEN-END:variables
}
